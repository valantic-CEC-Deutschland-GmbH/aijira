#!/usr/bin/env php
<?php

if (file_exists(__DIR__ . '/vendor/autoload.php')) {
    require __DIR__ . '/vendor/autoload.php';
} else {
    require_once(__DIR__ . '/../../autoload.php');
}

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

$application = new Application('OpenAI JIRA Tools', '1.0.0');

$application->add(new class('ticket:validate') extends Command {
    public function __construct(string $name = null)
    {
        parent::__construct($name);
        $this->setDescription('Use OpenAI to improve ticket quality.');
        $this->addArgument('ticket-no', InputArgument::REQUIRED, 'JIRA Ticket Number');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $command = 'aiticketvalidator "'.$input->getArgument('ticket-no').'"';
        exec($command, $outputBuffer);
        array_map([$output, 'writeln'], $outputBuffer);

        return Command::SUCCESS;
    }
});

$application->add(new class('ticket:estimate') extends Command {
    public function __construct(string $name = null)
    {
        parent::__construct($name);
        $this->setDescription('Use OpenAI to get an estimation in hours for a specific.');
        $this->addArgument('ticket-no', InputArgument::REQUIRED, 'JIRA Ticket Number');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $command = 'aiticketestimate "'.$input->getArgument('ticket-no').'"';
        exec($command, $outputBuffer);
        array_map([$output, 'writeln'], $outputBuffer);

        return Command::SUCCESS;
    }
});

$application->add(new class('ticket:ask') extends Command {
    public function __construct(string $name = null)
    {
        parent::__construct($name);
        $this->setDescription('Use OpenAI to ask the right questions for a user story.');
        $this->addArgument('ticket-no', InputArgument::REQUIRED, 'JIRA Ticket Number');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $command = 'aiticketinterview "'.$input->getArgument('ticket-no').'"';
        exec($command, $outputBuffer);
        array_map([$output, 'writeln'], $outputBuffer);

        return Command::SUCCESS;
    }
});

$application->add(new class('sprint:review') extends Command {
    public function __construct(string $name = null)
    {
        parent::__construct($name);
        $this->setDescription('Use OpenAI to generate a sprint review agenda.');
        $this->addArgument('sprint-name', InputArgument::REQUIRED, 'JIRA Sprint Name');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $command = 'aisprintreview "'.$input->getArgument('sprint-name').'"';
        exec($command, $outputBuffer);
        array_map([$output, 'writeln'], $outputBuffer);

        return Command::SUCCESS;
    }
});

$application->add(new class('sprint:goals') extends Command {
    public function __construct(string $name = null)
    {
        parent::__construct($name);
        $this->setDescription('Use OpenAI to generate your sprint goals for a planned or existing sprint.');
        $this->addArgument('sprint-name', InputArgument::REQUIRED, 'JIRA Sprint Name');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $command = 'aisprintgoals "'.$input->getArgument('sprint-name').'"';
        exec($command, $outputBuffer);
        array_map([$output, 'writeln'], $outputBuffer);

        return Command::SUCCESS;
    }
});

$application->run();